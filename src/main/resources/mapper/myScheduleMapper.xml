<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bluemine.www.interfaces.MyScheduleMapper">
<!-- 체크리스트 추가 (CKLIST table) -->
<insert id="createCKList" parameterType="ckList">
<selectKey resultType="int" keyProperty="cl_Num" order="BEFORE">
SELECT CL_SEQ.NEXTVAL
FROM dual
</selectKey>
INSERT INTO CKList(cl_Num,cl_Name,memberId)
VALUES(#{cl_Num},#{cl_Name},#{memberId})
</insert>
<!-- 체크리스트 추가(CK_Loops) -->
<insert id="createLoops">
INSERT INTO CK_Loops(loopNum,loopDay,loop_State,cl_Num)
VALUES(loop_seq.nextval,#{loopDay},0,#{cl_Num})
</insert>
<!-- 체크리스트 가져오기(관리용) -->
<select id="getCKList" resultType="ckList">
SELECT cl_Num, cl_Name, memberid
FROM CKList
WHERE memberId = #{memberId}
</select>
<!-- 체크리스트 가져오기(보여주기용) -->
<select id="showCKList" resultType="ckShow">
SELECT 
	loops.loopNum
	,ckl.cl_Name
	,loops.loop_State
	,loops.loopDay
FROM CKList ckl, CK_Loops loops
WHERE memberId = #{memberId} and ckl.cl_Num = loops.cl_Num
</select>
<!-- 체크리스트 하나 가져오기(수정용) -->
<select id="getOneList" resultType="ckShow">
SELECT
	ckl.cl_Num
	,loops.loopNum
	,ckl.cl_Name
	,loops.loopDay
FROM CKList ckl, CK_Loops loops
WHERE ckl.cl_Num = loops.cl_Num and ckl.cl_Num = #{cl_Num}
</select>
<!-- 체크리스트 이름 변경 -->
<update id="changeListName" parameterType="ckList">
UPDATE CKList
SET		cl_Name = #{cl_Name}
WHERE cl_Num = #{cl_Num}
</update>
<!-- 체크리스트 요일 삭제 -->
<delete id="deleteLoops">
DELETE CK_Loops
WHERE cl_Num = #{cl_Num}
</delete>
<!-- 체크리스트 요일별 완료 -->
<update id="checkLoop">
UPDATE ck_loops
SET		loop_state = 1
WHERE loopNum = #{loopNum}
</update>
<update id="uncheckLoop">
UPDATE ck_loops
SET		loop_state = 0
WHERE loopNum = #{loopNum}
</update>
<!-- 체크리스트 완료 초기화 -->
<update id="resetLoop">
UPDATE ck_loops
SET		loop_state = 0
WHERE cl_Num = #{cl_Num}
</update>
<!-- 체크리스트 삭제 -->
<delete id="deleteCKList">
DELETE CKList
WHERE cl_Num = #{cl_Num}
</delete>
<!-- 내 스케쥴 추가 -->
<insert id="createWork" parameterType="psWork">
INSERT INTO PS_Work (
	PS_Num
	,PS_Name
	,PS_Content
	,memberId
	,startDate
	,deadLine
	,Ps_Pri
	)
VALUES (
	ps_seq.nextval
	,#{ps_Name}
	,#{ps_Content}
	,#{memberId}
	,#{startDate}
	,#{deadLine}
	,#{ps_Pri}
	)
</insert>
<update id="updateWork" parameterType="psWork">
UPDATE PS_Work
SET		ps_Name = #{ps_Name},
		ps_Content = #{ps_Content},
		startDate = #{startDate},
		deadLine = #{deadLine},
		ps_Pri = #{ps_Pri}
WHERE ps_Num = #{ps_Num}
</update>
<delete id="deleteWork">
DELETE PS_Work
WHERE ps_Num = #{ps_Num}
</delete>
<update id="finishWork">
UPDATE PS_Work
SET		progress = 1
WHERE ps_Num = #{ps_Num}
</update>
<select id="getWorkList" resultType="psWork">
SELECT
	ps_Num
	,ps_Name
	,ps_Content,TO_CHAR(startDate,'YYYY-MM-DD')as startDate
	,TO_CHAR(deadLine,'YYYY-MM-DD')as deadLine
	,ps_Pri
	,progress
FROM PS_Work
WHERE
	memberId = #{memberId}
ORDER BY ps_Num
</select>
<select id="getWork" resultType="psWork">
SELECT
	ps_Num
	,ps_Name
	,ps_Content
	,TO_CHAR(startDate,'YYYY-MM-DD')as startDate
	,TO_CHAR(deadLine,'YYYY-MM-DD')as deadLine
	,ps_Pri,progress
FROM PS_Work
WHERE
	ps_Num = #{ps_Num}
</select>
</mapper>